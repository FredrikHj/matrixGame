[{"D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\index.js":"1","D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\reportWebVitals.js":"2","D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\MainApp.js":"3"},{"size":482,"mtime":1611076648675,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1611057402988,"results":"6","hashOfConfig":"5"},{"size":5065,"mtime":1611263737478,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1tkguyy",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\index.js",[],["17","18"],"D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\reportWebVitals.js",[],["19","20"],"D:\\Programmerings - Projekt\\desktop\\programming_exercise-skymill\\src\\MainApp.js",["21"],"import './App.css';\nimport React, { useState, useEffect } from 'react';\nfunction App() {\n  // Decide when starting the game\n  let [matrixIsSet, setMatrixIsSet] = useState(false);\n  let [matrixSize, setMatrixSize] = useState([]);\n  let [stdinPosX, setStdinPosX] = useState(0);\n  let [stdinPosY, setStdinPosY] = useState(0);\n  \n  // Incomming values as as string with total 4 letters from the input form according: wh(SartPosX)(startPosY)\n  let [startValueStr, setStartValueStr] = useState('');\n  \n  useEffect(() => {\n    if(matrixIsSet === true) successOrFail();\n  },[matrixSize, startValueStr, stdinPosX, stdinPosY])\n  \n  let handleValues = (e) => {\n    let targetValues = e.target;\n    // Save the incomming strign to a common command string\n    let stdin = targetValues.value;    \n    setStartValueStr(stdin);\n  }\n  let playMatrix = () => {\n    const startValueArr = startValueStr.split('');\n    let matrixSurface = {width: [], height: []};\n    //const startPoss = `${},${startValueArr[3]}`;\n    \n    // Rewrite the incomming string for wh into numer and save it in matrixSurface as a nr for later use\n    for (let index = 0; index < startValueStr[0]; index++) matrixSurface.width.push(index);\n    for (let index = 0; index < startValueStr[1]; index++) matrixSurface.height.push(index);\n    \n    // Rewrite the incomming string for startposs at xy into nr and save it in \n    setStdinPosX(parseInt(startValueArr[2]));\n    setStdinPosY(parseInt(startValueArr[3]));\n    \n    setMatrixSize(matrixSurface);\n    //setObjectStartPossStr(startPoss);\n    // Showing the Matrix :)\n    setMatrixIsSet(true);\n  }\n  let placingObject = (startPosX, startPosY) =>{\n    // Check where the object should be in the game start\n    if(stdinPosX === startPosX && stdinPosY === startPosY) return 'red';\n    else return 'lightblue';\n  }\n  const movment = (e) => {\n    // Convert the command from string into nr\n    const targetBtn = parseInt(e.target.id);\n    if(targetBtn === 1) setStdinPosY(stdinPosY-1);\n    if(targetBtn === 2) setStdinPosY(stdinPosY+1);\n\n    if(targetBtn === 3) setStdinPosX(stdinPosX+1); // Right\n    if(targetBtn === 4) setStdinPosX(stdinPosX-1); // Left\n  }\n  const successOrFail = () => {\n    console.log(\"ðŸš€ ~ file: MainApp.js ~ line 8 ~ App ~ setStdinPosX\", stdinPosX)\n\n    if(stdinPosX < 0 || stdinPosX > matrixSize.width.length-1 || stdinPosY < 0 || stdinPosY > matrixSize.height.length-1) console.log('Fail :( = -1,-1');\n    else console.log('Success :)');\n  }\n  console.log(\"ðŸš€ ~ file: MainApp.js ~ line 8 ~ App ~ setStdinPosX\", stdinPosX)\n  return (\n    <section className=\"mainApp\">\n      <header id=\"head\">\n        <section id=\"startValuesContainer\">\n          <label id=\"xyCells\">\n            Antal Celler i Bredd (X) / HÃ¶jd (Y)\n            <br></br>\n            samt startposition i XY enligt: xyxy\n          </label>\n          <input type=\"text\" id=\"startValueInput\" onChange={handleValues} placeholder=\"  ...\" maxLength=\"4\"/>\n        </section>    \n        <br></br>\n        <section id=\"matrixBoard\">\n          <button id=\"playMatrix\" onClick={playMatrix}>Spela Matrix</button>\n        </section>\n      </header>\n      <hr></hr>\n\n      <main>\n        <section id=\"moving\">\n          <p id=\"Headline\">FÃ¶rflyttnings -</p>\n          <section id=\"moveBtnCrossContainer\">\n              <button className=\"forward\" id=\"1\" onClick={movment}>FrammÃ¥t</button>\n            <section id=\"moveBtnRow\">\n              <button id=\"4\" onClick={movment}>VÃ¤nster</button>\n              <button id=\"3\" onClick={movment}>HÃ¶ger</button> \n            </section>\n              <button className=\"backward\" id=\"2\" onClick={movment}>BakÃ¥t</button> \n          </section>\n        </section>\n        <section id=\"matrixTabell\">\n\n          {(matrixIsSet === false)\n            ? 'VÃ¤lj antal celler inkl startpossition !'\n            :\n            /* height = row and width = Col */\n            matrixSize.height.map((item, rowIndex) =>{\n              return(\n                <section key={`Row${rowIndex}Container`} className=\"row\">\n                  {\n                    matrixSize.width.map((item, colIndex) =>{\n                      /* Styling the showing object, the objects should be showing in red */\n                      const objectStyle = {\n                        width: '75px',\n                        border: '1px solid black',\n                        backgroundColor: placingObject(colIndex, rowIndex),\n                      }\n                      //console.log(\"ðŸš€ ~ file: MainApp.js ~ line 89 ~ matrixSize.width.map ~ objectStyle\", objectStyle)\n                      return(\n                        <section key={`Col${colIndex}`} id={`${colIndex}x${rowIndex}`} style={objectStyle}>\n                          <p key={`Col${rowIndex},${colIndex}`} className=\"cel\">{`${colIndex}, ${rowIndex}`}</p>\n                        </section>\n                      );\n                    })\n                  }\n                </section>\n              )\n            })\n          }\n        </section>\n      </main>\n    </section>\n  );\n}\n\nexport default App;\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"22","replacedBy":"26"},{"ruleId":"24","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":15,"column":5,"nodeType":"30","endLine":15,"endColumn":54,"suggestions":"31"},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],["32"],["33"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'matrixIsSet' and 'successOrFail'. Either include them or remove the dependency array.","ArrayExpression",["34"],"no-global-assign","no-unsafe-negation",{"desc":"35","fix":"36"},"Update the dependencies array to be: [matrixIsSet, matrixSize, startValueStr, stdinPosX, stdinPosY, successOrFail]",{"range":"37","text":"38"},[566,615],"[matrixIsSet, matrixSize, startValueStr, stdinPosX, stdinPosY, successOrFail]"]